#!/bin/bash

export SCRIPT_BASE_DIR="/home/nsg/swbuilder/cluster/build-scripts/modules-environment"

show_help () {

printf "./gen_build_script SOFTWARE_TYPE SOFTWARE_NAME SOFTWARE_VER BUNDLE_NAME SOURCE_DIR BUILD_OPTIONS DEPENDENCIES PRE_SCRIPT POST_SCRIPT \n\n"
printf "For Example:\n"
printf " ./gen_build_script LANG PYTHON 2.7.4 Python-2.7.4.tar.bz2 Python-2.7.4 '--with-option:--with-other-option' \"LANG/COMPILER/GNU/4.8.0:LANG/PYTHON/2.7.4\" PRE_SCRIPT POST_SCRIPT \n"
}

check_success () {
  if [ $? -ne 0 ]; then
    printf "... Failed!\n"
  else
    printf "... Success!\n"
  fi
}

export PRE_SCRIPT_LOCATION="${PWD}/PRE-SCRIPTS"
export POST_SCRIPT_LOCATION="${PWD}/POST-SCRIPTS"
eval LAST_ARGUMENT=\${$#}

#SOFTWARE_TYPE="_SOFTWARE_TYPE_"
#SOFTWARE="_SOFTWARE_NAME_"
#SOFTWARE_VER="_SOFTWARE_VER_"
#BUNDLE_NAME="_BUNDLE_NAME_"
#SOURCE_DIR="_SOURCE_DIR_"
#BUILD_OPTIONS="_BUILD_OPTIONS_"
#DEPENDENCIES="_DEPS_"
export PRE_SCRIPT="PRE_SCRIPT-"${1}-${2}-${3}
export POST_SCRIPT="POST_SCRIPT-"${1}-${2}-${3}
eval PRE_ARGUMENT="${@:(-3):1}"
eval POST_ARGUMENT="${@:(-2):1}"

# If we're a CORE application they should be built immediately
# However, if we're the Modules Environment don't attempt to
# work with the modules command at all and skip any attempts
# to module "avail|load|switch" etc
if [[ ${1} == "CORE" && ${2} == "Module-Environment" ]]; then
  SKIP_MODULE="s/_SKIP_MODULE_/skipModule=YES/g"
  IMMEDIATE="YES"
# other CORE modules shouldn't create a module files
# eg. Torque, Maui
elif [ ${1} == "CORE" ]; then
  SKIP_MODULE="s/_SKIP_MODULE_/skipModule='YES'/g"
  IMMEDIATE="YES"
else
  SKIP_MODULE="/_SKIP_MODULE_/d"
fi

# We can just generate the scripts if we want
if [ $# -eq 7 ]; then
  printf "Immediate build not required.  Creating ${1}/${2}/${3}/build file\n"
  if [ ! -d ${1}/${2}/${3} ]; then
    mkdir -p ${1}/${2}/${3}
  fi
# if we specify "rebuild" as a final option we should build
# the software immedately
elif [ ${LAST_ARGUMENT} == "rebuild" ]; then
  IMMEDIATE="YES"
  if [ ! -d ${1}/${2}/${3} ]; then
    mkdir -p ${1}/${2}/${3}
  fi
fi

# Accept standard autoconf/configure options if specified
# we use colon separation and translate them to spaces
# this gets around "incorrect number of arguments" issues
if [ ${6} == "NONE" ]; then
  BUILD_OPTIONS="s|_BUILD_OPTIONS_||g"
else
  BUILD_OPTIONS_SUB=`echo ${6} | tr ":" " "`
  BUILD_OPTIONS="s|_BUILD_OPTIONS_|${BUILD_OPTIONS_SUB}|g"
fi

# include ability to specify module dependancies
# NOTE: ORDERING IS IMPORTANT
if [ ${7} == "NONE" ]; then
  DEP_OPTIONS="s/_DEPS_//g"
else
  DEP_OPTIONS_SUB=`echo ${7} | tr ":" " "`
  DEP_OPTIONS="s|_DEPS_|${DEP_OPTIONS_SUB}|g"
fi

if [[ ${PRE_ARGUMENT} == "NONE" || ${PRE_ARGUMENT} != "PRE_SCRIPT" ]]; then
  printf "No Pre-Scripts have been defined\n"
  PRE_SCRIPT_OPTIONS="s/_PRE_SCRIPT__//g"
else
  printf "Pre-Scripts have been defined.  Will execute ${PWD}/${1}/${2}/${3}/${PRE_SCRIPT}\n"
  PRE_SCRIPT_OPTIONS="s|_PRE_SCRIPT_|${PWD}/${1}/${2}/${3}/${PRE_SCRIPT}|g"
  printf "Copying Pre-Script\n"
  printf " - from ${PRE_SCRIPT_LOCATION}/${PRE_SCRIPT}\n"
  printf " - to ${PWD}/${1}/${2}/${3}/${PRE_SCRIPT}\n"
  cp ${PRE_SCRIPT_LOCATION}/${PRE_SCRIPT} ${PWD}/${1}/${2}/${3}/${PRE_SCRIPT}
  check_success
  chmod +x ${PWD}/${1}/${2}/${3}/${PRE_SCRIPT}
fi

if [[ ${POST_ARGUMENT} == "NONE" || ${POST_ARGUMENT} != "POST_SCRIPT" ]]; then
  printf "No Post-Scripts have been defined\n"
  POST_SCRIPT_OPTIONS="s/_POST_SCRIPT_//g"
else
  printf "Post-Scripts have been defined.  Will execute ${PWD}/${1}/${2}/${3}${POST_SCRIPT}\n"
  POST_SCRIPT_OPTIONS="s|_POST_SCRIPT_|${PWD}/${1}/${2}/${3}/${POST_SCRIPT}|g"
  printf "Copying Pre-Script\n"
  printf " - from ${POST_SCRIPT_LOCATION}/${POST_SCRIPT}\n"
  printf " - to ${PWD}/${1}/${2}/${3}/${POST_SCRIPT}\n"
  cp ${POST_SCRIPT_LOCATION}/${POST_SCRIPT} ${PWD}/${1}/${2}/${3}/${POST_SCRIPT}
  check_success
  chmod +x ${PWD}/${1}/${2}/${3}/${POST_SCRIPT}
fi

# Translate all command line arguments into a file build script
# This uses the build-template.script as the template and so if
# you ever need to regenerate the environment and push script
# fixes it becomes really easy, as does being able to rebuild
# the whole environment
sed -e "s/_SOFTWARE_TYPE_/${1}/g" -e "s/_SOFTWARE_NAME_/${2}/g" -e "s/_SOFTWARE_VER_/${3}/g" -e "s/_BUNDLE_NAME_/${4}/g" -e "s/_SOURCE_DIR_/${5}/g" -e "${BUILD_OPTIONS}" -e "${DEP_OPTIONS}" -e "${PRE_SCRIPT_OPTIONS}" -e "${POST_SCRIPT_OPTIONS}" -e "${SKIP_MODULE}" build-template.script > ${1}/${2}/${3}/build
chmod +x ${1}/${2}/${3}/build

# If rebuild is specified then generate the script and execute it
if [ ! -z ${IMMEDIATE} ]; then
  printf "Immediate build requested\n"
  cd ${SCRIPT_BASE_DIR}/${1}/${2}/${3}
  ./build
fi
